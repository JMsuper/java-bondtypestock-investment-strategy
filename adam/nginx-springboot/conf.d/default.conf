upstream springboot-api {
    ip_hash;
    server api-1:8080 max_fails=3 fail_timeout=30s;
    server api-2:8080 max_fails=3 fail_timeout=30s;
}

server {
    listen 80;
    server_name snowball-stock.site www.snowball-stock.site;

    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name snowball-stock.site www.snowball-stock.site;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/snowball-stock.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/snowball-stock.site/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Proxy to backend (e.g., Tomcat or another app server)
    location / {
        proxy_pass http://springboot-api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API 캐싱
    location ~ ^/api/v1/finances/(screening|stocks) {
        proxy_pass http://springboot-api;
        proxy_cache api_cache;
        proxy_cache_valid 200 60m;
        proxy_cache_use_stale error updating timeout http_500 http_502 http_503 http_504;

        # 클라이언트의 no-cache 요청 처리
        proxy_cache_bypass $http_cache_control;

        # 항상 백엔드에서 새로운 응답을 가져오고 캐시 갱신
        proxy_cache_background_update on;
        proxy_cache_lock on;

        # 캐시 상태 헤더 추가
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Logging
    access_log /var/log/nginx/proxy_access.log upstream_time;
    error_log /var/log/nginx/proxy_error.log;
}

